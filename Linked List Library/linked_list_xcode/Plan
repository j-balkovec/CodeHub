// {
// Constructor: Create an empty linked list.
// }

// {
// Destructor: Clean up memory and delete the linked list.
// }

// {
// isEmpty: Check if the linked list is empty.
// }

// {
// getSize: Get the number of elements in the linked list.
// }

// {
// insertFront: Insert a node at the beginning of the linked list.
// }

// {
// insertEnd: Insert a node at the end of the linked list.
// }

// {
// insertAtPosition: Insert a node at a specified position in the linked list.
// }

// {
// deleteFront: Delete the first node in the linked list.
// }

// {
// deleteEnd: Delete the last node in the linked list.
// }

// {
// deleteAtPosition: Delete a node at a specified position in the linked list.
// }

// {
// deleteByValue: Delete the first occurrence of a node with a specified value in the linked list.
// }

// {
// search: Search for a given value in the linked list and return the corresponding node or position.
// {

// {
// getFront: Get the value stored in the first node of the linked list.
// }

// {
// getEnd: Get the value stored in the last node of the linked list.
// }

// {
// getAtPosition: Get the value stored at a specified position in the linked list.
// }

// {
// display: Print the linked list in a readable format.
// }

// {
// reverse: Reverse the order of the linked list.
// }

// {
// clear: Remove all nodes from the linked list.
// }

// {
// }mergeSort: Sort the linked list using the merge sort algorithm.
// }

// {
// removeDuplicates: Remove duplicate elements from the linked list.
// }
